import streamlit as st
import plotly.graph_objects as go
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import numpy as np

st.set_page_config(layout="wide")
st.title("Anomaly Detection Dashboard")

# DATA_PATH = "data/DART_VMFF.xlsx"
DATA_PATH = "data/VMFF/DART Report/20250603_40S02.04_R2_SysTest_t_VMFF_Tx_CAS_Req_PP_CAS_MS3.csv"
# df = pd.read_excel(DATA_PATH)
df = pd.read_csv(DATA_PATH)


columns = {
    "te_id": "Test_Run_ID",
    "script_file_name": "Script_File",
    "passes": "P",
    "fails": "F",
    "blocks": "B",
    "unattempts": "U",
    "test_venue": "Venue",
    " capability": "Capability",
    "simulation_host": "Simulation_Host",
    " build": "Build"
}

df = df.rename(columns=columns)
df = df.dropna(subset=["Simulation_Host"])
print(df.columns)

df['Simulation_Node'] = df['Simulation_Host'].apply(lambda x: x.split("-")[0])

data = df[["P", "F", "B", "U", "total_init_time"]]

data['FR'] = np.where(
    (data['P'] + data['F'] + data['B'] + data['U']) != 0,
    data['F'] / (data['P'] + data['F'] + data['B'] + data['U']),
    1
)

data["Num_Tests"] = (data['P'] + data['F'] + data['B'] + data['U'])
df['FR'] = data["FR"]
df['Num_Tests'] = data["Num_Tests"]


scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)

pca = PCA(n_components=3)
principal_components = pca.fit_transform(scaled_data)


continuous_labels = ["FR", "Num_Tests", "total_init_time"]
label_dict = {
    "Failure Rate": "FR",
    "Total Tests": "Num_Tests",
    "Total Time": "total_init_time",
    "Simulation Host": "Simulation_Host", 
    "Simulation Node": "Simulation_Node",
    "Capability": "Capability",
    "Script File": "Script_File",
    "Venue": "Venue",
    "Ship Number": "ship_number",
    "Build": "Build",
}
label_options = ["Simulation_Host", "Simulation_Node", "Capability", "Script_File", "Venue", "Failure Rate"]
selected_label_name = st.selectbox("Select label", label_dict.keys(), width=500)
selected_label = label_dict[selected_label_name]

mean = np.mean(principal_components, axis=0)
std_dev = np.std(principal_components, axis=0)

df["ship_number"] = df["ship_number"].astype(str)

if selected_label in continuous_labels:
    fig = go.Figure()

    label_data = principal_components
    hovertext = df[['Test_Run_ID', 'FR', "Num_Tests", "total_init_time"]].values.tolist()
    anomaly_scores = np.linalg.norm(label_data - mean, axis=1) / std_dev.max()
    hovertext = [f"Test Run ID: {x[0]},\nFailure Rate: {x[1]:.2f},\nTotal Tests: {x[2]},\n Total Time {x[3]},\nAnomaly Score: {anomaly_score:.2f}" for x, anomaly_score in zip(hovertext, anomaly_scores)]
    value_rates = df[selected_label].values
    if selected_label == "FR":
        marker = dict(color=value_rates, cmin=0, cmax=1, colorscale=[[0, 'green'], [1, 'red']])
    else:
        max_failure_rate = max(value_rates)
        value_rates = np.sqrt(value_rates / max_failure_rate)
        marker = dict(color=value_rates, cmin=0, cmax=1, colorscale=[[0, 'blue'], [1, 'red']])
    fig.add_trace(go.Scatter3d(x=label_data[:, 0], y=label_data[:, 1], z=label_data[:, 2], mode='markers', hovertext=hovertext, hoverinfo='text', marker=marker))

else:
    unique_labels = df[selected_label].unique()

    fig = go.Figure()

    for label in unique_labels:
        label_data = principal_components[df[selected_label] == label]
        hovertext = df.loc[df[selected_label] == label, ['Test_Run_ID', "FR", "Num_Tests", selected_label]].values.tolist()
        anomaly_scores = np.linalg.norm(label_data - mean, axis=1) / std_dev.max()
        hovertext = [f"Test Run ID: {x[0]},\nFailure Rate: {x[1]:.2f},\nTotal Tests: {x[2]},\n{selected_label}: {x[3]},\nAnomaly Score: {anomaly_score:.2f}" for x, anomaly_score in zip(hovertext, anomaly_scores)]
        fig.add_trace(go.Scatter3d(x=label_data[:, 0], y=label_data[:, 1], z=label_data[:, 2], mode='markers', name=label, hovertext=hovertext, hoverinfo='text', legendwidth=200))
fig.update_layout(scene = dict(
                    xaxis_title='x',
                    yaxis_title='y',
                    zaxis_title='z'),
                    width=1600,
                    height=800)

st.plotly_chart(fig, use_container_width=True)
