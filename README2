import pytest
from unittest.mock import patch
import numpy as np
import torch
from torch.utils.data import Dataset

from box_dataset_class_final import BoxDataSet, SplitType

def test_init_withValidMode_shouldCreateInstance():
    """
    Tests that the class can be instantiated successfully with default parameters.
    """
    # Arrange & Act
    # A test will fail automatically if an unexpected exception occurs.
    dataset = BoxDataSet(num_examples=10, mode="train")
    # Assert
    assert isinstance(dataset, BoxDataSet)

def test_init_withInvalidMode_shouldRaiseValueError():
    """
    Tests that providing an invalid mode string raises a ValueError.
    """
    # Arrange
    invalid_mode = "validation"
    # Act & Assert
    with pytest.raises(ValueError):
        BoxDataSet(mode=invalid_mode)

def test_len_forTrainMode_shouldReturnCorrectSplitSize():
    """
    Tests the __len__ method returns the correct number of samples for the training set.
    """
    # Arrange
    num_examples = 100
    train_split_ratio = 0.8
    expected_len = int(num_examples * train_split_ratio)
    # Act
    dataset = BoxDataSet(num_examples=num_examples, train_split_ratio=train_split_ratio, mode="train")
    # Assert
    assert len(dataset) == expected_len

def test_len_forTestMode_shouldReturnCorrectSplitSize():
    """
    Tests the __len__ method returns the correct number of samples for the test set.
    """
    # Arrange
    num_examples = 100
    train_split_ratio = 0.8
    expected_len = num_examples - int(num_examples * train_split_ratio)
    # Act
    dataset = BoxDataSet(num_examples=num_examples, train_split_ratio=train_split_ratio, mode="test")
    # Assert
    assert len(dataset) == expected_len

def test_getItem_shouldReturnTupleOfTensorsWithCorrectShape():
    """
    Tests that __getitem__ returns data with the correct shape and type.
    """
    # Arrange
    in_seq_len = 5
    out_seq_len = 10
    image_size = 32
    num_channels = 1
    dataset = BoxDataSet(
        num_examples=10,
        in_seq_len=in_seq_len,
        out_seq_len=out_seq_len,
        image_size=image_size,
        num_channels=num_channels
    )
    # Act
    input_tensor, output_tensor = dataset[0]
    # Assert
    assert isinstance(input_tensor, torch.Tensor)
    assert isinstance(output_tensor, torch.Tensor)
    assert input_tensor.shape == (in_seq_len, num_channels, image_size, image_size)
    assert output_tensor.shape == (out_seq_len, num_channels, image_size, image_size)
