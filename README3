import pytest

SAMPLE_L1 = 40.0
SAMPLE_L2 = 240.0

from yourpkg.segment_definitions import SegmentDefinitions


def _base_supp_info():
    return {
        "1": 30.0,
        "2": 230.0,
        "3": SAMPLE_L1,
        "4": SAMPLE_L2,
    }


def test_postprocess_field_dict_happy_path():
    """Valid dict and correct d_l/c_l/delta_l2/d_l2 types → processes normally."""
    inp = {
        "report_count": 1,
        "supp_infos": [_base_supp_info()],
        "d_l": 5,          # int
        "c_l": 1.5,        # float
        "delta_l2": 2,     # int
        "d_l2": 3.0,       # float
    }

    segdefs = SegmentDefinitions()
    out = segdefs.segment._postprocess_field_dict(inp)

    supp_info = out["supp_infos"][0]
    assert isinstance(supp_info, dict)
    assert supp_info["3"] == SAMPLE_L1
    assert supp_info["4"] == SAMPLE_L2


def test_postprocess_field_dict_skips_non_dict():
    """Second entry not a dict → skipped unchanged."""
    inp = {
        "report_count": 2,
        "supp_infos": [
            _base_supp_info(),
            "not_a_dict",
        ],
        "d_l": 5,
        "c_l": 1.5,
        "delta_l2": 2,
        "d_l2": 3.0,
    }

    segdefs = SegmentDefinitions()
    out = segdefs.segment._postprocess_field_dict(inp)

    assert isinstance(out["supp_infos"][0], dict)
    assert out["supp_infos"][1] == "not_a_dict"


def test_postprocess_field_dict_type_guards_continue():
    """Wrong types for d_l/c_l/delta_l2/d_l2 → entries skipped/unchanged."""
    bad_info = {
        "1": 0.0,
        "2": 0.0,
        "3": 999.0,
        "4": 888.0,
    }
    inp = {
        "report_count": 1,
        "supp_infos": [bad_info],
        "d_l": "5",         # str instead of int
        "c_l": "1.5",       # str instead of float
        "delta_l2": None,   # not int
        "d_l2": "oops",     # not float
    }

    segdefs = SegmentDefinitions()
    out = segdefs.segment._postprocess_field_dict(inp)

    # Should be skipped: unchanged dict
    assert out["supp_infos"][0] == bad_info
