import pytest
from yourpkg.segment_definitions import SegmentDefinitions  # adjust import

@pytest.mark.parametrize(
    "inp_fields, supp_infos, expect_processed, expect_unchanged_idx",
    [
        pytest.param(
            # 1) Happy path: correct types → processed
            {"d_l": 5, "c_l": 1.5, "delta_l2": 2, "d_l2": 3.0},
            [{"1": 10.0, "2": 20.0, "3": None, "4": None}],
            True,
            None,
            id="happy-path",
        ),
        pytest.param(
            # 2) Non-dict guard: second item is NOT a dict → skipped unchanged
            {"d_l": 5, "c_l": 1.5, "delta_l2": 2, "d_l2": 3.0},
            [{"1": 10.0, "2": 20.0, "3": None, "4": None}, "not_a_dict"],
            True,
            1,
            id="non-dict-skipped",
        ),
        pytest.param(
            # 3) Type guard: wrong types in inp → entry remains unchanged
            {"d_l": "5", "c_l": "1.5", "delta_l2": None, "d_l2": "3.0"},
            [{"1": 0.0, "2": 0.0, "3": 999, "4": 888.0}],
            False,
            0,
            id="type-guard-skipped",
        ),
    ],
)
def test__postprocess_field_dict_parametrized(inp_fields, supp_infos, expect_processed, expect_unchanged_idx):
    segdefs = SegmentDefinitions()
    inp = {"report_count": len(supp_infos), "supp_infos": supp_infos, **inp_fields}

    out = segdefs.segment._postprocess_field_dict(inp)
    out_infos = out["supp_infos"]

    # If processed, the first dict should have "3" (d_l) and "4" (d_l2) set from inp_fields
    if expect_processed:
        processed = out_infos[0]
        assert isinstance(processed, dict)
        assert processed["3"] == inp_fields["d_l"]      # "3" is d_l (int)
        assert processed["4"] == inp_fields["d_l2"]     # "4" is d_l2 (float)

    # If a particular index should remain unchanged (due to guard), confirm exact equality
    if expect_unchanged_idx is not None:
        assert out_infos[expect_unchanged_idx] == supp_infos[expect_unchanged_idx]
